name: Docker Auto-Build & Push

on:
  push:
    branches:
      - main

jobs:
  docker:
    runs-on: ubuntu-latest
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      # 1Ô∏è‚É£ Checkout the repo
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ Setup Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 3Ô∏è‚É£ Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 4Ô∏è‚É£ Detect changed folders safely
      - name: Detect changed folders
        id: changes
        run: |
          echo "Detecting changed folders..."
          if [ -z "${{ github.event.before }}" ] || [ "${{ github.event.before }}" == "0000000000000000000000000000000000000000" ]; then
            # First commit or new branch ‚Üí consider all top-level folders
            CHANGED_FOLDERS=$(ls -d */ | sed 's#/##')
          else
            CHANGED_FOLDERS=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | awk -F/ '{print $1}' | sort -u)
          fi
          # Only keep folders that we have Docker images for
          CHANGED_FOLDERS=$(echo $CHANGED_FOLDERS | tr ' ' '\n' | grep -E '^(frontend|backend|ml_backend)$' || true)
          echo "Changed folders: $CHANGED_FOLDERS"
          echo "CHANGED_FOLDERS=$CHANGED_FOLDERS" >> $GITHUB_ENV

      # 5Ô∏è‚É£ Build and push Docker images for changed folders
      - name: Build & Push Docker Images
        run: |
          declare -A FOLDER_MAP
          FOLDER_MAP[frontend]="healthsense_frontend"
          FOLDER_MAP[backend]="healthsense_node_backend"
          FOLDER_MAP[ml_backend]="healthsense_ml_backend"

          for folder in $CHANGED_FOLDERS; do
            if [ -f "$folder/Dockerfile" ]; then
              IMAGE_NAME=${FOLDER_MAP[$folder]}
              if [ -z "$IMAGE_NAME" ]; then
                echo "‚ö†Ô∏è No mapping found for folder '$folder', skipping..."
                continue
              fi
              FULL_IMAGE="arshah22/$IMAGE_NAME:latest"
              echo "‚úÖ Building Docker image for $folder ‚Üí $FULL_IMAGE"
              docker build -t $FULL_IMAGE $folder
              echo "üöÄ Pushing $FULL_IMAGE to Docker Hub..."
              docker push $FULL_IMAGE
            else
              echo "‚è≠ No Dockerfile in $folder, skipping..."
            fi
          done
